UCF v0.84 MGC SCRIPT

Usage (requires Python 3.10 or higher):
python melee_gci_compiler.py --pal -o ucf0.84/ucf0.84pal.gci ucf0.84/ucf0.84pal.mgc

Welcome to this example MGC script. This script compiles a save file containing
the UCF codeset. You can find more information on each of the script components
by reading through the MGC files in the ucf_data folder.

The save file has three main components:
1. The ACE exploit that runs our custom code when entering "Name Entry" in Melee
2. The custom data we want to load, such as the Gecko codehandler and codeset
3. The datacopy table, which tells the ACE loader where to copy our custom data
--------------------------------------------------------------------------------

!begin

# PAL exploits must list init_pal.mgc as their first source
!src "../mgc/init_gci/init_pal.mgc"

!src "ucf_data/ace_exploit_pal.mgc"
!src "ucf_data/datacopy_table_pal.mgc"

# Gecko codehandler
!loc 80451a6c
!file "ucf_data/codehandler_pal.bin"

# PAL Melee includes nametag area validation, which requires certain byte in each
# nametag field to be nonzero. Because of this, we encode all copydata such that
# the PAL area validation succeeds. Loader 2 in ace_exploit decodes all transferred
# data. Note that the decoder expects all datacopy_table entries to be word aligned.
!palencode

# Load our custom data into the addresses expected by the datacopy table
# Internal filename
!loc 80452614
!string "UCFSettings PAL"
# pad to 0x18 length
00 00 00 00 00 00 00 00 00

# Displayed filename
!loc 8045262c
!string "UCF Save"
# pad to 0xC length
00 00 00 00

# Default Tournament Settings
!loc 80452638
00 34 01 02 04 00 0a 00 08 01 01 00

# PAL Gecko codeset

!loc 80455E08
!src "ucf_data/pal/gecko_codeset_start_general_codes.mgc"
!src "ucf_data/pal/neutral_start.mgc"
!src "ucf_data/pal/disable_wobbling.mgc"
!src "ucf_data/pal/polling_drift_fix.mgc"
!src "ucf_data/pal/ucf0.84.mgc"
!src "ucf_data/pal/pal_to_ntsc.mgc"
!src "ucf_data/pal/gecko_codeset_end.mgc"

# Encoded section ends here. The used encoding constant is placed according to
# address argument, so if address is changed, loader 2 needs to be altered
# accordingly.
!palencodeend 8044e950

!end