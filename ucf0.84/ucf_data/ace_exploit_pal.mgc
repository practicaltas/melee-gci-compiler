ACE EXPLOIT PAL

This file sets up the data and code for Melee's ACE (Arbitrary Code Execution)
save file exploit. It is required in order to run custom code from a save file.
--------------------------------------------------------------------------------

!begin
# Make the first nametag so long that it overflows into the stack's return pointer
!loc 8044e658
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD DDDDDDDD DDDDDDDD DDDDDDDD
DDDDDDDD 804dfc50 8044e738 DDDDDDDD

# This forces execution to branch to 8044e738 instead of back to the nametag
#
#   PAL: 8044e738

# --------------
# PAL Loader 1
# --------------
!loc 8044e738
!asm

lis r11,0x8045
ori r11,r11,0x8b38
lis r12,0x8023
ori r12,r12,0xbdb0
lis r3,0x8042
lwz r4,0x3d14(r3)
cmpwi r4,0			#is a memcard save in progress?
beq 0x10
stw r11,0x3d14(r3)	#if so, run loader2 when it's done and return
mtctr r12
bctr
mtctr r11			#if not, run loader2 now and set LR to return
mtlr r12
bctr

!asmend

# Now, we branch to the Loader 2 function and run whatever code we want before
# rebooting the game. In this example, we iterate through a datacopy table
# that conveniently lets us copy our custom data to other places in Melee
# memory, away from the save data region. (See datacopy_table_pal.mgc)
# Then, we run the Gecko codehandler one time to apply our Gecko codes.
# Unlike Gecko OS and Nintendont, we don't hook the codehandler to run every
# frame, so keep that in mind if your codes require that.

# --------------
# PAL Loader 2
# --------------
!loc 8045bd08
!asm

mflr r0
stw r0,0x4(sp)
stwu sp,-0x20(sp)
stw r31,0x1c(sp)
stw r30,0x18(sp)
stw r29,0x14(sp)
stw r28,0x10(sp)

#r7: pointer to datacopy table
lis r7,0x8045
ori r7,r7,0x186c

DATACOPYLOOP:
lwz r4,0(r7)	#source
cmpwi r4,0
beq CODEHANDLER
lwz r3,4(r7)	#destination
lwz r5,8(r7)	#size

#copy data
subi r4,r4,4
subi r6,r3,4
addi r5,r5,4
b 0xc
lwzu r0,0x4(r4)
stwu r0,0x4(r6)
subic. r5,r5,4
bne+ -0xc

#next string
addi r7,r7,0xc
b DATACOPYLOOP

CODEHANDLER:

#Zero fill entire nametag area
lis r3,0x8044
ori r3,r3,0xe658
li r4,0
li r5,0
ori r5,r5,0xc344
lis r12,0x8000
ori r12,r12,0x3130
mtctr r12
bctrl

#Init nametag data
li r3,2
lis r12,0x8015
ori r12,r12,0xff00
mtctr r12
bctrl

#Reload game data
lis r12,0x8001
ori r12,r12,0xcebc
mtctr r12
bctrl

#Run codehandler once
lis r12,0x8019
ori r12,r12,0x1c28
li r4,0
icbi r4,r12
sync
isync
mtctr r12
bctrl

#Clear cache
lis r3,0x8000
lis r4,0x3c
lis r12,0x8032
ori r12,r12,0x922c
mtctr r12
bctrl

li r3,6
lis r12,0x801a
ori r12,r12,0x4d9c
mtctr r12
bctrl

li r0,5
sth r0,-0x4ad8(r13)
lwz r3,-0x4f80(r13)
lwz r4,0x8(r3)
li r30,0
stb r30,0(r4)

END:
lis r12,0x801a
ori r12,r12,0x5664
mtctr r12
bctrl

lwz r0,0x24(sp)
lwz r31,0x1c(sp)
lwz r30,0x18(sp)
lwz r29,0x14(sp)
lwz r28,0x10(sp)
addi sp,sp,0x20
mtlr r0
blr

!asmend